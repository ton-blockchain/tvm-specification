{
  "POW2": {
    "description": {
      "short": "Raises 2 to the power of `x` and pushes the result back onto the stack.",
      "long": "Pops an integer from the stack, raises 2 to the power of it and pushes the result back onto the stack.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 1 element."
        },
        {
          "errno": "7",
          "condition": "Top element is not an Int."
        }
      ],
      "other_implementations": [
        {
          "exact": true,
          "instructions": ["PUSHINT_4 1", "SWAP", "LSHIFT_VAR"]
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "range": {
              "min": 0,
              "max": 255
            },
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "AND": {
    "description": {
      "short": "Bitwise AND of two signed integers `x` and `y`, sign-extended to infinity and pushes the result back onto the stack.",
      "long": "Pops two signed integers from the stack, performs a bitwise AND operation on them and pushes the result back onto the stack.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        },
        {
          "errno": "7",
          "condition": "Top or second element is not an Int."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "OR": {
    "description": {
      "short": "Bitwise OR of two signed integers `x` and `y`, sign-extended to infinity and pushes the result back onto the stack.",
      "long": "Pops two signed integers from the stack, performs a bitwise OR operation on them and pushes the result back onto the stack.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        },
        {
          "errno": "7",
          "condition": "Top or second element is not an Int."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "XOR": {
    "description": {
      "short": "Bitwise XOR of two signed integers `x` and `y`, sign-extended to infinity and pushes the result back onto the stack.",
      "long": "Pops two signed integers from the stack, performs a bitwise XOR operation on them and pushes the result back onto the stack.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 2 elements."
        },
        {
          "errno": "7",
          "condition": "Top or second element is not an Int."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "NOT": {
    "description": {
      "short": "Bitwise NOT of an integer, sign-extended to infinity and pushes the result back onto the stack.",
      "long": "Pops an integer from the stack, performs a bitwise NOT operation on it and pushes the result back onto the stack.",
      "tags": [],
      "operands": [],
      "exit_codes": [
        {
          "errno": "2",
          "condition": "Stack contains less than 1 element."
        },
        {
          "errno": "7",
          "condition": "Top element is not an Int."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "FITSX": {
    "description": {
      "short": "",
      "long": "Checks whether `x` is a `width`-bit signed integer.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "UFITSX": {
    "description": {
      "short": "",
      "long": "Checks whether `x` is a `width`-bit unsigned integer.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 1023
            }
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "BITSIZE": {
    "description": {
      "short": "",
      "long": "Computes smallest `width >= 0` such that `x` fits into a `width`-bit signed integer (`-2^(width-1) <= x < 2^(width-1)`).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "UBITSIZE": {
    "description": {
      "short": "",
      "long": "Computes smallest `width >= 0` such that `x` fits into a `width`-bit unsigned integer (`0 <= x < 2^width`), or throws a range check exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QPOW2": {
    "description": {
      "short": "Raises 2 to the power of `x` and pushes the result back onto the stack. Returns `NaN` if operand is `NaN`.",
      "long": "Pops an integer from the stack, raises 2 to the power of it and pushes the result back onto the stack. If the operand is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QAND": {
    "description": {
      "short": "Bitwise AND of two signed integers `x` and `y`, sign-extended to infinity and pushes the result back onto the stack. Returns `NaN` if any operand is `NaN`.",
      "long": "Pops two signed integers from the stack, performs a bitwise AND operation on them and pushes the result back onto the stack. If any of the operands is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QOR": {
    "description": {
      "short": "Bitwise OR of two signed integers `x` and `y`, sign-extended to infinity and pushes the result back onto the stack. Returns `NaN` if any operand is `NaN`.",
      "long": "Pops two signed integers from the stack, performs a bitwise OR operation on them and pushes the result back onto the stack. If any of the operands is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QXOR": {
    "description": {
      "short": "Bitwise XOR of two signed integers `x` and `y`, sign-extended to infinity and pushes the result back onto the stack. Returns `NaN` if any operand is `NaN`.",
      "long": "Pops two signed integers from the stack, performs a bitwise XOR operation on them and pushes the result back onto the stack. If any of the operands is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QNOT": {
    "description": {
      "short": "Bitwise NOT of an integer, sign-extended to infinity and pushes the result back onto the stack. Returns `NaN` if operand is `NaN`.",
      "long": "Pops an integer from the stack, performs a bitwise NOT operation on it and pushes the result back onto the stack. If the operand is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QFITSX": {
    "description": {
      "short": "",
      "long": "Replaces `x` with a `NaN` if x is not a `width`-bit signed integer, leaves it intact otherwise.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QUFITSX": {
    "description": {
      "short": "",
      "long": "Replaces `x` with a `NaN` if x is not a `width`-bit unsigned integer, leaves it intact otherwise.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QBITSIZE": {
    "description": {
      "short": "Computes smallest `width >= 0` such that `x` fits into a `width`-bit signed integer. Returns `NaN` if operand is `NaN`.",
      "long": "Computes smallest `width >= 0` such that `x` fits into a `width`-bit signed integer (`-2^(width-1) <= x < 2^(width-1)`). If the operand is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QUBITSIZE": {
    "description": {
      "short": "Computes smallest `width >= 0` such that `x` fits into a `width`-bit unsigned integer. Returns `NaN` if operand is `NaN`.",
      "long": "Computes smallest `width >= 0` such that `x` fits into a `width`-bit unsigned integer (`0 <= x < 2^width`). If the operand is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "width",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "FITS": {
    "description": {
      "short": "",
      "long": "Checks whether `x` is a `width`-bit signed integer (i.e., whether `-2 ^ width <= x < 2 ^ width`).",
      "tags": [],
      "operands": ["width"],
      "exit_codes": [
        {
          "errno": "4",
          "condition": "Integer does not fit into `width` bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "UFITS": {
    "description": {
      "short": "",
      "long": "Checks whether `x` is a `width`-bit unsigned integer (i.e., whether `0 <= x < 2 ^ width`).",
      "tags": [],
      "operands": ["width"],
      "exit_codes": [
        {
          "errno": "4",
          "condition": "Integer does not fit into `width` bits."
        }
      ]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QFITS": {
    "description": {
      "short": "",
      "long": "Replaces `x` with a `NaN` if x does not fit into a `width`-bit signed integer, leaves it intact otherwise.",
      "tags": [],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QUFITS": {
    "description": {
      "short": "",
      "long": "Replaces `x` with a `NaN` if x does not fit into a `width`-bit unsigned integer, leaves it intact otherwise.",
      "tags": [],
      "operands": ["width"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LSHIFT_VAR": {
    "description": {
      "short": "",
      "long": "Shift the top element of the stack left by a number of bits equal to the second element of the stack.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "range": {
              "min": 0,
              "max": 1023
            },
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "LSHIFT": {
    "description": {
      "short": "",
      "long": "Shift the top element of the stack left by `c` bits.",
      "tags": [],
      "operands": ["c"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QLSHIFT_VAR": {
    "description": {
      "short": "Shift the top element of the stack left by a number of bits equal to the second element of the stack. Returns `NaN` if any operand is `NaN`.",
      "long": "Shift the top element of the stack left by a number of bits equal to the second element of the stack. If any of the operands is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QLSHIFT": {
    "description": {
      "short": "Shift the top element of the stack left by `c` bits. Returns `NaN` if operand is `NaN`.",
      "long": "Shift the top element of the stack left by `c` bits. If the operand is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": ["c"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "RSHIFT_VAR": {
    "description": {
      "short": "",
      "long": "Shift the top element of the stack right by a number of bits equal to the second element of the stack.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "range": {
              "min": 0,
              "max": 1023
            },
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "RSHIFT": {
    "description": {
      "short": "",
      "long": "Shift the top element of the stack right by `c` bits.",
      "tags": [],
      "operands": ["c"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QRSHIFT_VAR": {
    "description": {
      "short": "Shift the top element of the stack right by a number of bits equal to the second element of the stack. Returns `NaN` if any operand is `NaN`.",
      "long": "Shift the top element of the stack right by a number of bits equal to the second element of the stack. If any of the operands is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "y",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  },
  "QRSHIFT": {
    "description": {
      "short": "Shift the top element of the stack right by `c` bits. Returns `NaN` if operand is `NaN`.",
      "long": "Shift the top element of the stack right by `c` bits. If the operand is `NaN`, returns `NaN` instead of throwing an exception.",
      "tags": [],
      "operands": ["c"]
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "x",
            "value_types": ["Int"]
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "result",
            "value_types": ["Int"]
          }
        ]
      }
    }
  }
}
