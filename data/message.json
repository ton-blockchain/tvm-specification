{
  "SENDRAWMSG": {
    "description": {
      "short": "Creates an output action to send a raw message `msg`.",
      "long": "Cell `msg` should contain a correctly serialized object `Message X`.\n\nSource address can have dummy value `addr_none`, and will be automatically replaced with the current smart-contract address.\n\n`ihr_fee`, `fwd_fee`, `created_lt` and `created_at` fields can also have arbitrary values and will be rewritten with correct values during the action phase of the current transaction.\n\nInteger parameter `mode` contains the flags.\n\n- `mode=0` is used for ordinary messages.\n\n- `mode=128` is used for messages that are to carry all the remaining balance of the current smart contract (instead of the value originally indicated in the message).\n\n- `mode=64` is used for messages that carry all the remaining value of the inbound message in addition to the value initially indicated in the new message (if bit 0 is not set, the gas fees are deducted from this amount).\n\n- `mode'=mode+1` means that the sender wants to pay transfer fees separately.\n\n- `mode'=mode+2` means that any errors arising while processing this message during the action phase should be ignored.\n\n- `mode'=mode+32` means that the current account must be destroyed if its resulting balance is zero. This flag is usually employed together with `+128`.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "msg",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "mode",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  },
  "RAWRESERVE": {
    "description": {
      "short": "Creates an output action which would reserve exactly `amount` nanotons (if `mode=0`), at most `x` nanotons (if `mode=2`), or all but `x` nanotons (if `mode=1` or `mode=3`), from the remaining balance of the account. ",
      "long": "This behavior is roughly equivalent to creating an outbound message carrying `amount` nanotons (or `b-amount` nanotons, where `b` is the remaining balance) to oneself, so that the subsequent output actions would not be able to spend more money than the remainder.\n\n- Bit `+2` in `mode` means that the external action does not fail if the specified amount cannot be reserved; instead, all remaining balance is reserved.\n\n- Bit `+8` in `mode` means `amount=-amount` before performing any further actions.\n\n- Bit `+4` in `mode` means that `amount` is increased by the original balance of the current account (before the compute phase), including all extra currencies, before performing any other checks and actions.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "amount",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 2147483648
            }
          },
          {
            "type": "simple",
            "name": "mode",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 31
            }
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  },
  "RAWRESERVEX": {
    "description": {
      "short": "",
      "long": "Similar to `RAWRESERVE`, but also accepts a dictionary `D` with extra currencies. In this way currencies other than TON can be reserved.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "amount",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "D",
            "value_types": ["Cell", "Null"]
          },
          {
            "type": "simple",
            "name": "mode",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  },
  "SETCODE": {
    "description": {
      "short": "",
      "long": "Creates an output action that would change this smart contract code to that given by _Cell_ `code`. This change will take effect only after the successful termination of the current run of the smart contract.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "code",
            "value_types": ["Cell"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  },
  "SETLIBCODE": {
    "description": {
      "short": "Creates an output action that would modify the collection of this smart contract libraries by adding or removing library with code given in _Cell_ `code`.",
      "long": "- If `mode=0`, the library is removed if it was previously present in the collection, if not, this action does nothing.\n\n- If `mode=1`, the library is added as a private library.\n\n- If `mode=2`, the library is added as a public library and becomes available to all smart contracts if the current smart contract resides in the masterchain.\n\nIf the library was present in the collection before, its public/private status is changed according to `mode`. Values of `mode` other than `0...2` are invalid.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "code",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "mode",
            "value_types": ["Int"],
            "range": {
              "min": 0,
              "max": 2
            }
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  },
  "CHANGELIB": {
    "description": {
      "short": "",
      "long": "Creates an output action similarly to `SETLIBCODE`, but instead of the library code accepts its hash as an unsigned 256-bit integer `hash`. If `mode != 0` and the library with `hash` is absent from the library collection of this smart contract, this output action will fail.",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "hash",
            "value_types": ["Int"]
          },
          {
            "type": "simple",
            "name": "mode",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  },
  "SENDMSG": {
    "description": {
      "short": "Creates an output action to send a message `msg` and returns a fee for creating a message.",
      "long": "Mode has the same effect as in the case of `SENDRAWMSG`.\n\nAdditionally `+1024` means â€” do not create an action, only estimate fee. Other modes affect the fee calculation as follows:\n\n- `+64` substitutes the entire balance of the incoming message as an outcoming value (slightly inaccurate, gas expenses that cannot be estimated before the computation is completed are not taken into account).\n\n- `+128` substitutes the value of the entire balance of the contract before the start of the computation phase (slightly inaccurate, since gas expenses that cannot be estimated before the completion of the computation phase are not taken into account).",
      "tags": [],
      "operands": []
    },
    "signature": {
      "inputs": {
        "stack": [
          {
            "type": "simple",
            "name": "msg",
            "value_types": ["Cell"]
          },
          {
            "type": "simple",
            "name": "mode",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      },
      "outputs": {
        "stack": [
          {
            "type": "simple",
            "name": "fee",
            "value_types": ["Int"]
          }
        ],
        "registers": [
          {
            "type": "constant",
            "index": 5
          }
        ]
      }
    }
  }
}
